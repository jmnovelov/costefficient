/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jmnv.costefficient.ui;

import com.jmnv.costefficient.controller.IngredientGateway;
import com.jmnv.costefficient.model.Ingredient;
import java.awt.Component;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author jmnov
 */
public class DlgIngredient extends javax.swing.JDialog {

    private IngredientGateway ingredientGateway;
    
    private long ingredientId = 0L;
    
    private int selectedItem = -1;
    
    private TableRowSorter<IngredientTableModel> sorter;
    
    private DialogNotifier<Ingredient> notifier;
    
    /**
     * Creates new form DlgIngredient
     */
    public DlgIngredient(java.awt.Frame parent, IngredientGateway ingredientGateway, DialogNotifier<Ingredient> notifier) {
        super(parent, true);
        initComponents();
        setLocationRelativeTo(parent);
        this.ingredientGateway = ingredientGateway;
        this.notifier = notifier;
        
        sorter = new TableRowSorter<>(ingredientTableModel);
        tblIngredients.setRowSorter(sorter);
        tblIngredients.setDefaultRenderer(Double.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); //To change body of generated methods, choose Tools | Templates.
                setText(String.format("$%.2f", (Double) value));
                return component;
            }
            
        });
        setEnableComponents(false);
        new SwingWorker<List<Ingredient>, Object>() {
                @Override
                protected List<Ingredient> doInBackground() throws Exception {
                    return ingredientGateway.getIngredients();
                }

                @Override
                protected void done() {
                    try {
                        List<Ingredient> ingredients = get();
                        ingredientTableModel.addAll(ingredients);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog((JFrame) getParent(), 
                                "No se pudo cargar los ingredientes: " 
                                        + ex.getMessage(), 
                                "Hubo un problema", 
                                JOptionPane.ERROR_MESSAGE);
                    } finally {
                        setEnableComponents(true);
                    }
                }
            }.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ingredientTableModel = new com.jmnv.costefficient.ui.IngredientTableModel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtCostPerUnit = new javax.swing.JTextField();
        cmbUnitType = new javax.swing.JComboBox<>();
        txtName = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblIngredients = new javax.swing.JTable();
        btnClose = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administrar Ingredientes");

        jLabel1.setText("Nombre:");

        jLabel2.setText("Tipo de Unidades:");

        jLabel3.setText("Costo por Unidad:");

        cmbUnitType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cucharada cafetera", "Cucharada sopera", "Gramos", "Galon", "Kilogramos", "Libras", "Litros", "Mililitros", "Onzas", "Pieza", "Tazas" }));
        cmbUnitType.setSelectedIndex(-1);

        btnSave.setText("Guardar Ingrediente");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancelar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbUnitType, 0, 221, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtName)
                                    .addComponent(txtCostPerUnit)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCostPerUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbUnitType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblIngredients.setModel(ingredientTableModel);
        tblIngredients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblIngredientsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblIngredients);

        btnClose.setText("Cerrar");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnDelete.setText("Eliminar Ingrediente");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel4.setText("Buscar Ingrediente:");

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        cleanInputs();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        final Ingredient ingredient = mapIngredientFromUI();
        
        if (ingredient == null)
            return;
        
        setEnableComponents(false);
        new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                ingredientGateway.saveIngredient(ingredient);
                return null;
            }

            @Override
            protected void done() {
                try {
                    get();
                    
                    if (selectedItem < 0) {
                        ingredientTableModel.add(ingredient);
                    } else {
                        ingredientTableModel.set(selectedItem, ingredient);
                    }
                    
                    notifier.notify(ingredient);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(DlgIngredient.this, 
                            ex.getMessage(), 
                            "Error al guardar", 
                            JOptionPane.ERROR_MESSAGE);
                } finally {
                    setEnableComponents(true);
                    cleanInputs();
                }
            }
        }.execute();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void setEnableComponents(boolean enabled) {
        txtName.setEnabled(enabled);
        txtCostPerUnit.setEnabled(enabled);
        cmbUnitType.setEnabled(enabled);
        btnSave.setEnabled(enabled);
        btnCancel.setEnabled(enabled);
        btnDelete.setEnabled(enabled);
        btnClose.setEnabled(enabled);
        txtSearch.setEnabled(enabled);
        tblIngredients.setEnabled(enabled);
    }
    
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int row = tblIngredients.getSelectedRow();
        final int rowModel = tblIngredients.convertRowIndexToModel(row);
        
        if (rowModel >= 0) {
            int choice = JOptionPane.showConfirmDialog(this, 
                    "Esta seguro que desea eliminar el ingrediente?\n"
                            + "ADVERTENCIA: Si el ingrediente es utilizado en "
                            + "alguna receta no podra ser eliminado", 
                    "Confirme", 
                    JOptionPane.YES_NO_OPTION);
           
            if (choice == JOptionPane.YES_OPTION) {
                final long id = ingredientTableModel.get(rowModel).getIngredientId();
                setEnableComponents(false);
                new SwingWorker() {
                    @Override
                    protected Object doInBackground() throws Exception {
                        ingredientGateway.deleteIngredient(id);
                        return null;
                    }

                    @Override
                    protected void done() {
                        try {
                            super.get(); //To change body of generated methods, choose Tools | Templates.
                            ingredientTableModel.deleteRow(rowModel);
                        } catch (Exception ex) {
                            if (ex.getCause() instanceof SQLException && ((SQLException) ex.getCause()).getErrorCode() == 19) {
                                JOptionPane.showMessageDialog(DlgIngredient.this, 
                                    "No se pudo eliminar el ingrediente porque esta siendo usado en una receta",
                                    "Error al eliminar", 
                                    JOptionPane.ERROR_MESSAGE);
                            } else {
                                ex.printStackTrace();
                                JOptionPane.showMessageDialog(DlgIngredient.this, 
                                        "Hubo un error inesperado: " + ex.getMessage(),
                                        "Error al eliminar", 
                                        JOptionPane.ERROR_MESSAGE);
                            }
                        } finally {
                            setEnableComponents(true);
                            cleanInputs();
                        }
                    }
                }.execute();
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblIngredientsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblIngredientsMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() >= 2) {
            int row = tblIngredients.getSelectedRow();
            this.selectedItem = tblIngredients.convertRowIndexToModel(row);
            
            if (selectedItem >= 0) {
                Ingredient ingredient = ingredientTableModel.get(selectedItem);
                mapIngredientToUI(ingredient);
            }
        }
    }//GEN-LAST:event_tblIngredientsMouseClicked

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        // TODO add your handling code here:
        String search = txtSearch.getText().trim();

        if (search.length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + search));
        }
    }//GEN-LAST:event_txtSearchKeyTyped

    private void mapIngredientToUI(Ingredient ingredient) {
        this.ingredientId = ingredient.getIngredientId();
        txtName.setText(ingredient.getName());
        txtCostPerUnit.setText(String.format("%.2f", ingredient.getCostPerUnit()));
        cmbUnitType.setSelectedItem(ingredient.getUnitName());
    }
    
    private Ingredient mapIngredientFromUI() {
        try {
            double costPerUnit = Double.parseDouble(txtCostPerUnit.getText().trim());
            Ingredient ingredient = new Ingredient();
            ingredient.setIngredientId(ingredientId);
            ingredient.setCostPerUnit(costPerUnit);
            ingredient.setName(txtName.getText().trim());
            ingredient.setUnitName((String) cmbUnitType.getSelectedItem());
            return ingredient;
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, 
                    "Costo por unidad no valido: " + txtCostPerUnit.getText(), 
                    "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
        }
        
        return null;
    }
    
    private void cleanInputs() {
        ingredientId = 0;
        selectedItem = -1;
        txtName.setText("");
        txtCostPerUnit.setText("");
        cmbUnitType.setSelectedIndex(-1);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cmbUnitType;
    private com.jmnv.costefficient.ui.IngredientTableModel ingredientTableModel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblIngredients;
    private javax.swing.JTextField txtCostPerUnit;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
