/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jmnv.costefficient.ui;

import com.jmnv.costefficient.controller.IngredientGateway;
import com.jmnv.costefficient.model.Ingredient;
import com.jmnv.costefficient.model.RecipeDetail;
import java.awt.Component;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author jmnov
 */
public class DlgRecipeDetail extends javax.swing.JDialog {

    private IngredientGateway ingredientGateway;
    
    private DialogNotifier<RecipeDetail> notifier;
    
    private TableRowSorter sorter;
    
    private boolean closeOnSave;
    
    /**
     * Creates new form DlgRecipeDetail
     */
    public DlgRecipeDetail(java.awt.Frame parent, IngredientGateway ingredientGateway, RecipeDetail detail, DialogNotifier<RecipeDetail> notifier) {
        super(parent, true);
        initComponents();
        setLocationRelativeTo(parent);
        this.ingredientGateway = ingredientGateway;
        this.notifier = notifier;
        sorter = new TableRowSorter(ingredientTableModel1);
        sorter.addRowSorterListener((e) -> {
            if (tblIngredients.getRowCount() == 1) {
                tblIngredients.setRowSelectionInterval(0, 0);
            }
        });
        tblIngredients.setDefaultRenderer(Double.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); //To change body of generated methods, choose Tools | Templates.
                setText(String.format("$%.2f", (Double) value));
                return component;
            }
            
        });
        tblIngredients.setRowSorter(sorter);
        ingredientTableModel1.clear();
        initialScreen();
        
        if (detail != null) {
            closeOnSave = true;
            mapDetailToUI(detail);
        }
    }

    public void mapDetailToUI(RecipeDetail detail) {
        txtSearch.setText(detail.getIngredient().getName());
        txtUnits.setText(String.format("%.2f", detail.getUnits()));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ingredientTableModel1 = new com.jmnv.costefficient.ui.IngredientTableModel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblIngredients = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        lblUnits = new javax.swing.JLabel();
        txtUnits = new javax.swing.JTextField();
        cmdClose = new javax.swing.JButton();
        cmdSelectIngredient = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seleccionar Ingredientes");
        setResizable(false);

        tblIngredients.setModel(ingredientTableModel1);
        tblIngredients.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tblIngredients);

        jLabel2.setText("Ingrediente:");

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        lblUnits.setText("Unidades:");

        cmdClose.setText("Cerrar");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });

        cmdSelectIngredient.setText("Seleccionar Ingrediente");
        cmdSelectIngredient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSelectIngredientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(lblUnits))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUnits)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(txtSearch)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 234, Short.MAX_VALUE)
                        .addComponent(cmdSelectIngredient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUnits)
                    .addComponent(txtUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdClose)
                    .addComponent(cmdSelectIngredient))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        String search = txtSearch.getText().trim();
        
        if (search.length() > 0) {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + search));
        } else {
            sorter.setRowFilter(null);
        }
    }//GEN-LAST:event_txtSearchKeyTyped

    private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCloseActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cmdCloseActionPerformed

    private void cmdSelectIngredientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSelectIngredientActionPerformed
        try {
            double units = Double.parseDouble(txtUnits.getText().trim());
            int row = tblIngredients.getSelectedRow();
            
            if (row >= 0) {
                int model = tblIngredients.convertRowIndexToModel(row);
                Ingredient ingredient = ingredientTableModel1.get(model);
                RecipeDetail detail = new RecipeDetail(ingredient, units);
                notifier.notify(detail);
                
                if (closeOnSave) {
                    dispose();
                } else {
                    cleanComponents();
                    txtSearch.requestFocusInWindow();
                }
            } else {
                JOptionPane.showMessageDialog(this, 
                        "Necesita seleccionar un ingrediente", 
                        "Advertencia", 
                        JOptionPane.WARNING_MESSAGE);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, 
                    "Cantidad de unidades invalido: " + txtUnits.getText(), 
                    "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_cmdSelectIngredientActionPerformed

    public void initialScreen() {
        cleanComponents();
        setComponentsEnabled(false);
        
        new SwingWorker<List<Ingredient>, Object>() {
            
            @Override
            protected List<Ingredient> doInBackground() throws Exception {
                return ingredientGateway.getIngredients();
            }

            @Override
            protected void done() {
                try {
                    ingredientTableModel1.addAll(get());
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(DlgRecipeDetail.this, 
                            "Error al cargar los ingredientes", 
                            ex.getMessage(), 
                            JOptionPane.ERROR_MESSAGE);
                } finally {
                    setComponentsEnabled(true);
                }
            }
            
        }.execute();
    }
    
    public void setComponentsEnabled(boolean enabled) {
        txtSearch.setEnabled(enabled);
        tblIngredients.setEnabled(enabled);
        txtUnits.setEnabled(enabled);
        cmdClose.setEnabled(enabled);
        cmdSelectIngredient.setEnabled(enabled);
    }
    
    public void cleanComponents() {
        txtSearch.setText("");
        txtUnits.setText("");
        tblIngredients.clearSelection();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdClose;
    private javax.swing.JButton cmdSelectIngredient;
    private com.jmnv.costefficient.ui.IngredientTableModel ingredientTableModel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblUnits;
    private javax.swing.JTable tblIngredients;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtUnits;
    // End of variables declaration//GEN-END:variables
}
